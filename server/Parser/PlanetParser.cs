//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Planet.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PlanetParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CMD_LINE=1, EXEC_HEADER=2, DEF=3, VAR=4, IF=5, ELSE=6, WHILE=7, RETURN=8, 
		IMPORT=9, AND=10, OR=11, NOT=12, TRUE=13, FALSE=14, NULL=15, EXECUTE=16, 
		UNDER_NS=17, UNDER_MAIN=18, ASSIGN=19, EQ=20, NEQ=21, LTE=22, GTE=23, 
		LT=24, GT=25, PLUS=26, MINUS=27, MUL=28, DIV=29, MOD=30, LPAREN=31, RPAREN=32, 
		LBRACE=33, RBRACE=34, LBRACK=35, RBRACK=36, COMMA=37, COLON=38, SEMI=39, 
		FLOAT=40, DOUBLE=41, INT=42, STRING=43, Identifier=44, NEWLINE=45, WS=46, 
		COMMENT=47;
	public const int
		RULE_program = 0, RULE_topLevelDecl = 1, RULE_functionDecl = 2, RULE_paramList = 3, 
		RULE_block = 4, RULE_statement = 5, RULE_varDecl = 6, RULE_importStmt = 7, 
		RULE_ifStmt = 8, RULE_whileStmt = 9, RULE_returnStmt = 10, RULE_commandStmt = 11, 
		RULE_assignStmt = 12, RULE_lvalue = 13, RULE_exprStmt = 14, RULE_emptyStmt = 15, 
		RULE_eos = 16, RULE_expr = 17, RULE_logicOr = 18, RULE_logicAnd = 19, 
		RULE_equality = 20, RULE_relation = 21, RULE_add = 22, RULE_mul = 23, 
		RULE_unary = 24, RULE_postfix = 25, RULE_atom = 26, RULE_callSuffix = 27, 
		RULE_argList = 28, RULE_indexer = 29, RULE_literal = 30, RULE_stringLiteral = 31, 
		RULE_arrayLiteral = 32, RULE_nbtObject = 33, RULE_nbtPair = 34, RULE_nbtKey = 35, 
		RULE_nbtValue = 36;
	public static readonly string[] ruleNames = {
		"program", "topLevelDecl", "functionDecl", "paramList", "block", "statement", 
		"varDecl", "importStmt", "ifStmt", "whileStmt", "returnStmt", "commandStmt", 
		"assignStmt", "lvalue", "exprStmt", "emptyStmt", "eos", "expr", "logicOr", 
		"logicAnd", "equality", "relation", "add", "mul", "unary", "postfix", 
		"atom", "callSuffix", "argList", "indexer", "literal", "stringLiteral", 
		"arrayLiteral", "nbtObject", "nbtPair", "nbtKey", "nbtValue"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'def'", "'var'", "'if'", "'else'", "'while'", "'return'", 
		"'import'", "'and'", "'or'", "'!'", "'true'", "'false'", "'null'", "'execute'", 
		"'__namespace__'", "'__main__'", "'='", "'=='", "'!='", "'<='", "'>='", 
		"'<'", "'>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'('", "')'", "'{'", 
		"'}'", "'['", "']'", "','", "':'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CMD_LINE", "EXEC_HEADER", "DEF", "VAR", "IF", "ELSE", "WHILE", 
		"RETURN", "IMPORT", "AND", "OR", "NOT", "TRUE", "FALSE", "NULL", "EXECUTE", 
		"UNDER_NS", "UNDER_MAIN", "ASSIGN", "EQ", "NEQ", "LTE", "GTE", "LT", "GT", 
		"PLUS", "MINUS", "MUL", "DIV", "MOD", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACK", "RBRACK", "COMMA", "COLON", "SEMI", "FLOAT", "DOUBLE", "INT", 
		"STRING", "Identifier", "NEWLINE", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Planet.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PlanetParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PlanetParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PlanetParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PlanetParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclContext[] topLevelDecl() {
			return GetRuleContexts<TopLevelDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclContext topLevelDecl(int i) {
			return GetRuleContext<TopLevelDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 69864085525438L) != 0)) {
				{
				State = 76;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEF:
					{
					State = 74;
					topLevelDecl();
					}
					break;
				case CMD_LINE:
				case EXEC_HEADER:
				case VAR:
				case IF:
				case WHILE:
				case RETURN:
				case IMPORT:
				case NOT:
				case LPAREN:
				case LBRACE:
				case LBRACK:
				case SEMI:
				case FLOAT:
				case DOUBLE:
				case INT:
				case STRING:
				case Identifier:
				case NEWLINE:
					{
					State = 75;
					statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl() {
			return GetRuleContext<FunctionDeclContext>(0);
		}
		public TopLevelDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterTopLevelDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitTopLevelDecl(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelDeclContext topLevelDecl() {
		TopLevelDeclContext _localctx = new TopLevelDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			functionDecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(PlanetParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlanetParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PlanetParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PlanetParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(DEF);
			State = 86;
			Match(Identifier);
			State = 87;
			Match(LPAREN);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 88;
				paramList();
				}
			}

			State = 91;
			Match(RPAREN);
			State = 92;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(PlanetParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(PlanetParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PlanetParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PlanetParser.COMMA, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 6, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(Identifier);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 95;
				Match(COMMA);
				State = 96;
				Match(Identifier);
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(PlanetParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(PlanetParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(LBRACE);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 69864085525430L) != 0)) {
				{
				{
				State = 103;
				statement();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 109;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStmtContext importStmt() {
			return GetRuleContext<ImportStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandStmtContext commandStmt() {
			return GetRuleContext<CommandStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStmtContext assignStmt() {
			return GetRuleContext<AssignStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprStmtContext exprStmt() {
			return GetRuleContext<ExprStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStmtContext emptyStmt() {
			return GetRuleContext<EmptyStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111;
				varDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				importStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113;
				ifStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114;
				whileStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 115;
				returnStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 116;
				commandStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 117;
				assignStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 118;
				exprStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 119;
				emptyStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(PlanetParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlanetParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PlanetParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(VAR);
			State = 123;
			Match(Identifier);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 124;
				Match(ASSIGN);
				State = 125;
				expr();
				}
			}

			State = 128;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(PlanetParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ImportStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterImportStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitImportStmt(this);
		}
	}

	[RuleVersion(0)]
	public ImportStmtContext importStmt() {
		ImportStmtContext _localctx = new ImportStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_importStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(IMPORT);
			State = 131;
			stringLiteral();
			State = 132;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(PlanetParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PlanetParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PlanetParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PlanetParser.ELSE, 0); }
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(IF);
			State = 135;
			Match(LPAREN);
			State = 136;
			expr();
			State = 137;
			Match(RPAREN);
			State = 138;
			block();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 139;
				Match(ELSE);
				State = 140;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(PlanetParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PlanetParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PlanetParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_whileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(WHILE);
			State = 144;
			Match(LPAREN);
			State = 145;
			expr();
			State = 146;
			Match(RPAREN);
			State = 147;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(PlanetParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_returnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(RETURN);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34129957621760L) != 0)) {
				{
				State = 150;
				expr();
				}
			}

			State = 153;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_LINE() { return GetToken(PlanetParser.CMD_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(PlanetParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(PlanetParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXEC_HEADER() { return GetToken(PlanetParser.EXEC_HEADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CommandStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterCommandStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitCommandStmt(this);
		}
	}

	[RuleVersion(0)]
	public CommandStmtContext commandStmt() {
		CommandStmtContext _localctx = new CommandStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_commandStmt);
		try {
			int _alt;
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CMD_LINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				Match(CMD_LINE);
				State = 157;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 156;
						Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 159;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case EXEC_HEADER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161;
				Match(EXEC_HEADER);
				State = 162;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PlanetParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AssignStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitAssignStmt(this);
		}
	}

	[RuleVersion(0)]
	public AssignStmtContext assignStmt() {
		AssignStmtContext _localctx = new AssignStmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			lvalue();
			State = 166;
			Match(ASSIGN);
			State = 167;
			expr();
			State = 168;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlanetParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexerContext[] indexer() {
			return GetRuleContexts<IndexerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexerContext indexer(int i) {
			return GetRuleContext<IndexerContext>(i);
		}
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterLvalue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitLvalue(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		LvalueContext _localctx = new LvalueContext(Context, State);
		EnterRule(_localctx, 26, RULE_lvalue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(Identifier);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 171;
				indexer();
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExprStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterExprStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitExprStmt(this);
		}
	}

	[RuleVersion(0)]
	public ExprStmtContext exprStmt() {
		ExprStmtContext _localctx = new ExprStmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_exprStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			expr();
			State = 178;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public EmptyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterEmptyStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitEmptyStmt(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStmtContext emptyStmt() {
		EmptyStmtContext _localctx = new EmptyStmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_emptyStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PlanetParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PlanetParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(PlanetParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(PlanetParser.NEWLINE, i);
		}
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 32, RULE_eos);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 182;
					_la = TokenStream.LA(1);
					if ( !(_la==SEMI || _la==NEWLINE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicOrContext logicOr() {
			return GetRuleContext<LogicOrContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 34, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			logicOr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicOrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicAndContext[] logicAnd() {
			return GetRuleContexts<LogicAndContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicAndContext logicAnd(int i) {
			return GetRuleContext<LogicAndContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(PlanetParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(PlanetParser.OR, i);
		}
		public LogicOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicOr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterLogicOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitLogicOr(this);
		}
	}

	[RuleVersion(0)]
	public LogicOrContext logicOr() {
		LogicOrContext _localctx = new LogicOrContext(Context, State);
		EnterRule(_localctx, 36, RULE_logicOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			logicAnd();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 190;
				Match(OR);
				State = 191;
				logicAnd();
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicAndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext[] equality() {
			return GetRuleContexts<EqualityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityContext equality(int i) {
			return GetRuleContext<EqualityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(PlanetParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(PlanetParser.AND, i);
		}
		public LogicAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicAnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterLogicAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitLogicAnd(this);
		}
	}

	[RuleVersion(0)]
	public LogicAndContext logicAnd() {
		LogicAndContext _localctx = new LogicAndContext(Context, State);
		EnterRule(_localctx, 38, RULE_logicAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			equality();
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 198;
				Match(AND);
				State = 199;
				equality();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQ() { return GetTokens(PlanetParser.EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ(int i) {
			return GetToken(PlanetParser.EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEQ() { return GetTokens(PlanetParser.NEQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ(int i) {
			return GetToken(PlanetParser.NEQ, i);
		}
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		EqualityContext _localctx = new EqualityContext(Context, State);
		EnterRule(_localctx, 40, RULE_equality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			relation();
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQ || _la==NEQ) {
				{
				{
				State = 206;
				_la = TokenStream.LA(1);
				if ( !(_la==EQ || _la==NEQ) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 207;
				relation();
				}
				}
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddContext[] add() {
			return GetRuleContexts<AddContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add(int i) {
			return GetRuleContext<AddContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(PlanetParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(PlanetParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LTE() { return GetTokens(PlanetParser.LTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE(int i) {
			return GetToken(PlanetParser.LTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(PlanetParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(PlanetParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GTE() { return GetTokens(PlanetParser.GTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE(int i) {
			return GetToken(PlanetParser.GTE, i);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 42, RULE_relation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			add();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 62914560L) != 0)) {
				{
				{
				State = 214;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 62914560L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 215;
				add();
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulContext[] mul() {
			return GetRuleContexts<MulContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulContext mul(int i) {
			return GetRuleContext<MulContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(PlanetParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(PlanetParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(PlanetParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(PlanetParser.MINUS, i);
		}
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 44, RULE_add);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			mul();
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 222;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 223;
				mul();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(PlanetParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(PlanetParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(PlanetParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(PlanetParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(PlanetParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(PlanetParser.MOD, i);
		}
		public MulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mul; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitMul(this);
		}
	}

	[RuleVersion(0)]
	public MulContext mul() {
		MulContext _localctx = new MulContext(Context, State);
		EnterRule(_localctx, 46, RULE_mul);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			unary();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0)) {
				{
				{
				State = 230;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 231;
				unary();
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PlanetParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PlanetParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PlanetParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PostfixContext postfix() {
			return GetRuleContext<PostfixContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 48, RULE_unary);
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237;
				Match(NOT);
				State = 238;
				Match(LPAREN);
				State = 239;
				expr();
				State = 240;
				Match(RPAREN);
				}
				break;
			case LPAREN:
			case LBRACE:
			case LBRACK:
			case FLOAT:
			case DOUBLE:
			case INT:
			case STRING:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242;
				postfix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSuffixContext[] callSuffix() {
			return GetRuleContexts<CallSuffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallSuffixContext callSuffix(int i) {
			return GetRuleContext<CallSuffixContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexerContext[] indexer() {
			return GetRuleContexts<IndexerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexerContext indexer(int i) {
			return GetRuleContext<IndexerContext>(i);
		}
		public PostfixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterPostfix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitPostfix(this);
		}
	}

	[RuleVersion(0)]
	public PostfixContext postfix() {
		PostfixContext _localctx = new PostfixContext(Context, State);
		EnterRule(_localctx, 50, RULE_postfix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			atom();
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LPAREN || _la==LBRACK) {
				{
				State = 248;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LPAREN:
					{
					State = 246;
					callSuffix();
					}
					break;
				case LBRACK:
					{
					State = 247;
					indexer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlanetParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PlanetParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PlanetParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 52, RULE_atom);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
			case FLOAT:
			case DOUBLE:
			case INT:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253;
				literal();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 254;
				Match(Identifier);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 255;
				Match(LPAREN);
				State = 256;
				expr();
				State = 257;
				Match(RPAREN);
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 259;
				arrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PlanetParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PlanetParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public CallSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterCallSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitCallSuffix(this);
		}
	}

	[RuleVersion(0)]
	public CallSuffixContext callSuffix() {
		CallSuffixContext _localctx = new CallSuffixContext(Context, State);
		EnterRule(_localctx, 54, RULE_callSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(LPAREN);
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34129957621760L) != 0)) {
				{
				State = 263;
				argList();
				}
			}

			State = 266;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PlanetParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PlanetParser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 56, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			expr();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 269;
				Match(COMMA);
				State = 270;
				expr();
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(PlanetParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(PlanetParser.RBRACK, 0); }
		public IndexerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterIndexer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitIndexer(this);
		}
	}

	[RuleVersion(0)]
	public IndexerContext indexer() {
		IndexerContext _localctx = new IndexerContext(Context, State);
		EnterRule(_localctx, 58, RULE_indexer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(LBRACK);
			State = 277;
			expr();
			State = 278;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(PlanetParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(PlanetParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(PlanetParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NbtObjectContext nbtObject() {
			return GetRuleContext<NbtObjectContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 60, RULE_literal);
		try {
			State = 285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280;
				Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				Match(FLOAT);
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 282;
				Match(DOUBLE);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 283;
				stringLiteral();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 284;
				nbtObject();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PlanetParser.STRING, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 62, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(PlanetParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(PlanetParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PlanetParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PlanetParser.COMMA, i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 64, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(LBRACK);
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34129957621760L) != 0)) {
				{
				State = 290;
				expr();
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 291;
					Match(COMMA);
					State = 292;
					expr();
					}
					}
					State = 297;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 300;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NbtObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(PlanetParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(PlanetParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NbtPairContext[] nbtPair() {
			return GetRuleContexts<NbtPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NbtPairContext nbtPair(int i) {
			return GetRuleContext<NbtPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PlanetParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PlanetParser.COMMA, i);
		}
		public NbtObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nbtObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterNbtObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitNbtObject(this);
		}
	}

	[RuleVersion(0)]
	public NbtObjectContext nbtObject() {
		NbtObjectContext _localctx = new NbtObjectContext(Context, State);
		EnterRule(_localctx, 66, RULE_nbtObject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			Match(LBRACE);
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==Identifier) {
				{
				State = 303;
				nbtPair();
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 304;
					Match(COMMA);
					State = 305;
					nbtPair();
					}
					}
					State = 310;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 313;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NbtPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NbtKeyContext nbtKey() {
			return GetRuleContext<NbtKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PlanetParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NbtValueContext nbtValue() {
			return GetRuleContext<NbtValueContext>(0);
		}
		public NbtPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nbtPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterNbtPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitNbtPair(this);
		}
	}

	[RuleVersion(0)]
	public NbtPairContext nbtPair() {
		NbtPairContext _localctx = new NbtPairContext(Context, State);
		EnterRule(_localctx, 68, RULE_nbtPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			nbtKey();
			State = 316;
			Match(COLON);
			State = 317;
			nbtValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NbtKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlanetParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PlanetParser.STRING, 0); }
		public NbtKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nbtKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterNbtKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitNbtKey(this);
		}
	}

	[RuleVersion(0)]
	public NbtKeyContext nbtKey() {
		NbtKeyContext _localctx = new NbtKeyContext(Context, State);
		EnterRule(_localctx, 70, RULE_nbtKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NbtValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PlanetParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(PlanetParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(PlanetParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(PlanetParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NbtObjectContext nbtObject() {
			return GetRuleContext<NbtObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(PlanetParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(PlanetParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(PlanetParser.NULL, 0); }
		public NbtValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nbtValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.EnterNbtValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlanetListener typedListener = listener as IPlanetListener;
			if (typedListener != null) typedListener.ExitNbtValue(this);
		}
	}

	[RuleVersion(0)]
	public NbtValueContext nbtValue() {
		NbtValueContext _localctx = new NbtValueContext(Context, State);
		EnterRule(_localctx, 72, RULE_nbtValue);
		try {
			State = 330;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321;
				Match(STRING);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322;
				Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 323;
				Match(FLOAT);
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 324;
				Match(DOUBLE);
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 325;
				nbtObject();
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 326;
				arrayLiteral();
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 327;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 328;
				Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 329;
				Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,47,333,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,1,0,1,0,5,0,77,8,0,10,0,12,0,80,9,0,1,0,1,0,1,1,1,1,1,2,1,2,
		1,2,1,2,3,2,90,8,2,1,2,1,2,1,2,1,3,1,3,1,3,5,3,98,8,3,10,3,12,3,101,9,
		3,1,4,1,4,5,4,105,8,4,10,4,12,4,108,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,3,5,121,8,5,1,6,1,6,1,6,1,6,3,6,127,8,6,1,6,1,6,1,7,1,7,
		1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,142,8,8,1,9,1,9,1,9,1,9,1,9,1,
		9,1,10,1,10,3,10,152,8,10,1,10,1,10,1,11,1,11,4,11,158,8,11,11,11,12,11,
		159,1,11,1,11,3,11,164,8,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,5,13,173,
		8,13,10,13,12,13,176,9,13,1,14,1,14,1,14,1,15,1,15,1,16,4,16,184,8,16,
		11,16,12,16,185,1,17,1,17,1,18,1,18,1,18,5,18,193,8,18,10,18,12,18,196,
		9,18,1,19,1,19,1,19,5,19,201,8,19,10,19,12,19,204,9,19,1,20,1,20,1,20,
		5,20,209,8,20,10,20,12,20,212,9,20,1,21,1,21,1,21,5,21,217,8,21,10,21,
		12,21,220,9,21,1,22,1,22,1,22,5,22,225,8,22,10,22,12,22,228,9,22,1,23,
		1,23,1,23,5,23,233,8,23,10,23,12,23,236,9,23,1,24,1,24,1,24,1,24,1,24,
		1,24,3,24,244,8,24,1,25,1,25,1,25,5,25,249,8,25,10,25,12,25,252,9,25,1,
		26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,261,8,26,1,27,1,27,3,27,265,8,27,
		1,27,1,27,1,28,1,28,1,28,5,28,272,8,28,10,28,12,28,275,9,28,1,29,1,29,
		1,29,1,29,1,30,1,30,1,30,1,30,1,30,3,30,286,8,30,1,31,1,31,1,32,1,32,1,
		32,1,32,5,32,294,8,32,10,32,12,32,297,9,32,3,32,299,8,32,1,32,1,32,1,33,
		1,33,1,33,1,33,5,33,307,8,33,10,33,12,33,310,9,33,3,33,312,8,33,1,33,1,
		33,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
		36,1,36,3,36,331,8,36,1,36,0,0,37,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,0,
		6,2,0,39,39,45,45,1,0,20,21,1,0,22,25,1,0,26,27,1,0,28,30,1,0,43,44,345,
		0,78,1,0,0,0,2,83,1,0,0,0,4,85,1,0,0,0,6,94,1,0,0,0,8,102,1,0,0,0,10,120,
		1,0,0,0,12,122,1,0,0,0,14,130,1,0,0,0,16,134,1,0,0,0,18,143,1,0,0,0,20,
		149,1,0,0,0,22,163,1,0,0,0,24,165,1,0,0,0,26,170,1,0,0,0,28,177,1,0,0,
		0,30,180,1,0,0,0,32,183,1,0,0,0,34,187,1,0,0,0,36,189,1,0,0,0,38,197,1,
		0,0,0,40,205,1,0,0,0,42,213,1,0,0,0,44,221,1,0,0,0,46,229,1,0,0,0,48,243,
		1,0,0,0,50,245,1,0,0,0,52,260,1,0,0,0,54,262,1,0,0,0,56,268,1,0,0,0,58,
		276,1,0,0,0,60,285,1,0,0,0,62,287,1,0,0,0,64,289,1,0,0,0,66,302,1,0,0,
		0,68,315,1,0,0,0,70,319,1,0,0,0,72,330,1,0,0,0,74,77,3,2,1,0,75,77,3,10,
		5,0,76,74,1,0,0,0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,
		0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,82,5,0,0,1,82,1,1,0,0,0,83,84,3,4,2,
		0,84,3,1,0,0,0,85,86,5,3,0,0,86,87,5,44,0,0,87,89,5,31,0,0,88,90,3,6,3,
		0,89,88,1,0,0,0,89,90,1,0,0,0,90,91,1,0,0,0,91,92,5,32,0,0,92,93,3,8,4,
		0,93,5,1,0,0,0,94,99,5,44,0,0,95,96,5,37,0,0,96,98,5,44,0,0,97,95,1,0,
		0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,7,1,0,0,0,101,99,1,
		0,0,0,102,106,5,33,0,0,103,105,3,10,5,0,104,103,1,0,0,0,105,108,1,0,0,
		0,106,104,1,0,0,0,106,107,1,0,0,0,107,109,1,0,0,0,108,106,1,0,0,0,109,
		110,5,34,0,0,110,9,1,0,0,0,111,121,3,12,6,0,112,121,3,14,7,0,113,121,3,
		16,8,0,114,121,3,18,9,0,115,121,3,20,10,0,116,121,3,22,11,0,117,121,3,
		24,12,0,118,121,3,28,14,0,119,121,3,30,15,0,120,111,1,0,0,0,120,112,1,
		0,0,0,120,113,1,0,0,0,120,114,1,0,0,0,120,115,1,0,0,0,120,116,1,0,0,0,
		120,117,1,0,0,0,120,118,1,0,0,0,120,119,1,0,0,0,121,11,1,0,0,0,122,123,
		5,4,0,0,123,126,5,44,0,0,124,125,5,19,0,0,125,127,3,34,17,0,126,124,1,
		0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,129,3,32,16,0,129,13,1,0,0,0,
		130,131,5,9,0,0,131,132,3,62,31,0,132,133,3,32,16,0,133,15,1,0,0,0,134,
		135,5,5,0,0,135,136,5,31,0,0,136,137,3,34,17,0,137,138,5,32,0,0,138,141,
		3,8,4,0,139,140,5,6,0,0,140,142,3,8,4,0,141,139,1,0,0,0,141,142,1,0,0,
		0,142,17,1,0,0,0,143,144,5,7,0,0,144,145,5,31,0,0,145,146,3,34,17,0,146,
		147,5,32,0,0,147,148,3,8,4,0,148,19,1,0,0,0,149,151,5,8,0,0,150,152,3,
		34,17,0,151,150,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,154,3,32,16,
		0,154,21,1,0,0,0,155,157,5,1,0,0,156,158,5,45,0,0,157,156,1,0,0,0,158,
		159,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,164,1,0,0,0,161,162,5,
		2,0,0,162,164,3,8,4,0,163,155,1,0,0,0,163,161,1,0,0,0,164,23,1,0,0,0,165,
		166,3,26,13,0,166,167,5,19,0,0,167,168,3,34,17,0,168,169,3,32,16,0,169,
		25,1,0,0,0,170,174,5,44,0,0,171,173,3,58,29,0,172,171,1,0,0,0,173,176,
		1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,27,1,0,0,0,176,174,1,0,0,0,
		177,178,3,34,17,0,178,179,3,32,16,0,179,29,1,0,0,0,180,181,3,32,16,0,181,
		31,1,0,0,0,182,184,7,0,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,
		0,0,185,186,1,0,0,0,186,33,1,0,0,0,187,188,3,36,18,0,188,35,1,0,0,0,189,
		194,3,38,19,0,190,191,5,11,0,0,191,193,3,38,19,0,192,190,1,0,0,0,193,196,
		1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,37,1,0,0,0,196,194,1,0,0,0,
		197,202,3,40,20,0,198,199,5,10,0,0,199,201,3,40,20,0,200,198,1,0,0,0,201,
		204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,39,1,0,0,0,204,202,1,0,
		0,0,205,210,3,42,21,0,206,207,7,1,0,0,207,209,3,42,21,0,208,206,1,0,0,
		0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,41,1,0,0,0,212,210,
		1,0,0,0,213,218,3,44,22,0,214,215,7,2,0,0,215,217,3,44,22,0,216,214,1,
		0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,43,1,0,0,0,220,
		218,1,0,0,0,221,226,3,46,23,0,222,223,7,3,0,0,223,225,3,46,23,0,224,222,
		1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,45,1,0,0,0,
		228,226,1,0,0,0,229,234,3,48,24,0,230,231,7,4,0,0,231,233,3,48,24,0,232,
		230,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,47,1,0,
		0,0,236,234,1,0,0,0,237,238,5,12,0,0,238,239,5,31,0,0,239,240,3,34,17,
		0,240,241,5,32,0,0,241,244,1,0,0,0,242,244,3,50,25,0,243,237,1,0,0,0,243,
		242,1,0,0,0,244,49,1,0,0,0,245,250,3,52,26,0,246,249,3,54,27,0,247,249,
		3,58,29,0,248,246,1,0,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,248,1,0,
		0,0,250,251,1,0,0,0,251,51,1,0,0,0,252,250,1,0,0,0,253,261,3,60,30,0,254,
		261,5,44,0,0,255,256,5,31,0,0,256,257,3,34,17,0,257,258,5,32,0,0,258,261,
		1,0,0,0,259,261,3,64,32,0,260,253,1,0,0,0,260,254,1,0,0,0,260,255,1,0,
		0,0,260,259,1,0,0,0,261,53,1,0,0,0,262,264,5,31,0,0,263,265,3,56,28,0,
		264,263,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,267,5,32,0,0,267,55,
		1,0,0,0,268,273,3,34,17,0,269,270,5,37,0,0,270,272,3,34,17,0,271,269,1,
		0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,57,1,0,0,0,275,
		273,1,0,0,0,276,277,5,35,0,0,277,278,3,34,17,0,278,279,5,36,0,0,279,59,
		1,0,0,0,280,286,5,42,0,0,281,286,5,40,0,0,282,286,5,41,0,0,283,286,3,62,
		31,0,284,286,3,66,33,0,285,280,1,0,0,0,285,281,1,0,0,0,285,282,1,0,0,0,
		285,283,1,0,0,0,285,284,1,0,0,0,286,61,1,0,0,0,287,288,5,43,0,0,288,63,
		1,0,0,0,289,298,5,35,0,0,290,295,3,34,17,0,291,292,5,37,0,0,292,294,3,
		34,17,0,293,291,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,
		0,296,299,1,0,0,0,297,295,1,0,0,0,298,290,1,0,0,0,298,299,1,0,0,0,299,
		300,1,0,0,0,300,301,5,36,0,0,301,65,1,0,0,0,302,311,5,33,0,0,303,308,3,
		68,34,0,304,305,5,37,0,0,305,307,3,68,34,0,306,304,1,0,0,0,307,310,1,0,
		0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,311,
		303,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,5,34,0,0,314,67,1,
		0,0,0,315,316,3,70,35,0,316,317,5,38,0,0,317,318,3,72,36,0,318,69,1,0,
		0,0,319,320,7,5,0,0,320,71,1,0,0,0,321,331,5,43,0,0,322,331,5,42,0,0,323,
		331,5,40,0,0,324,331,5,41,0,0,325,331,3,66,33,0,326,331,3,64,32,0,327,
		331,5,13,0,0,328,331,5,14,0,0,329,331,5,15,0,0,330,321,1,0,0,0,330,322,
		1,0,0,0,330,323,1,0,0,0,330,324,1,0,0,0,330,325,1,0,0,0,330,326,1,0,0,
		0,330,327,1,0,0,0,330,328,1,0,0,0,330,329,1,0,0,0,331,73,1,0,0,0,31,76,
		78,89,99,106,120,126,141,151,159,163,174,185,194,202,210,218,226,234,243,
		248,250,260,264,273,285,295,298,308,311,330
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
