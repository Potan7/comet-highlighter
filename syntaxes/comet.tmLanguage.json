{
   "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Comet",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#another_keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#command"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.comet",
          "match": "\\b(?<!^\/)(if|while|execute|return|import)\\b"
        }
      ]
    },
    "another_keywords": {
      "patterns": [
        {
          "name": "keyword.other",
          "match": "\\b(var|def)\\b"
        }
      ]
    },
    "command": {
      "patterns": [
        {
          "name": "commandLine.comet",
          "match": "^\\s*/\\s*(.*)$",
          "captures": {
            "0": {
              "name": "command.comet"
            }
          },
          "include": "#root"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.comet",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.comet",
          "match": "\\\\."
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.comet",
          "match": "#.*$"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.comet",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comet",
          "match": "[+\\-*/%=&|<>!^]=?|&&|\\|\\|"
        }
      ]
    },
    "mcoperators": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "constant.numeric.mcfunction"
            }
          },
          "match": "[~^]",
          "name": "meta.operators"
        },
        {
          "captures": {
            "0": {
              "name": "keyword.operator.mcfunction"
            }
          },
          "match": "[\\-%?!+*<>\\\\|&=.:,;]|(?<=[^\\s])/",
          "name": "meta.operators"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.definition.comet",
          "match": "[\\[\\]{}()<>.,;:]"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.comet",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.comet",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "root": {
      "patterns": [
        {
          "include": "#literals"
        },
        {
          "include": "#mccomments"
        },
        {
          "include": "#say"
        },
        {
          "include": "#names"
        },
        {
          "include": "#comments_inline"
        },
        {
          "include": "#subcommands"
        },
        {
          "include": "#property"
        },
        {
          "include": "#mcoperators"
        },
        {
          "include": "#selectors"
        }
      ]
    },
    "mccomments": {
      "patterns": [
        {
          "applyEndPatternLast": 1,
          "begin": "^\\s*/\\s*(#[>!#])(.+)$",
          "beginCaptures": {
            "1": {
              "name": "comment.block.mcfunction"
            },
            "2": {
              "name": "markup.bold.mcfunction"
            }
          },
          "captures": {
            "0": {
              "name": "comment.block.mcfunction"
            }
          },
          "end": "^(?!#)",
          "name": "meta.comments",
          "patterns": [
            {
              "include": "#comments_block"
            }
          ]
        },
        {
          "captures": {
            "0": {
              "name": "comment.line.mcfunction"
            }
          },
          "match": "^\\s*/\\s*#.*$",
          "name": "meta.comments"
        }
      ]
    },
    "comments_inline": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "comment.line.mcfunction"
            }
          },
          "match": "^\\s*/\\s*#.*$",
          "name": "meta.comments"
        }
      ]
    },
    "comments_block": {
      "patterns": [
        {
          "applyEndPatternLast": 1,
          "begin": "^\\s*/\\s*#[>!]",
          "captures": {
            "0": {
              "name": "comment.block.mcfunction"
            }
          },
          "end": "$",
          "name": "meta.comments_block",
          "patterns": [
            {
              "include": "#comments_block_emphasized"
            }
          ]
        },
        {
          "applyEndPatternLast": 1,
          "begin": "^\\s*/\\s*#",
          "captures": {
            "0": {
              "name": "comment.block.mcfunction"
            }
          },
          "end": "$",
          "name": "meta.comments_block",
          "patterns": [
            {
              "include": "#comments_block_normal"
            }
          ]
        }
      ]
    },
    "comments_block_emphasized": {
      "patterns": [
        {
          "include": "#comments_block_special"
        },
        {
          "captures": {
            "0": {
              "name": "markup.bold.mcfunction"
            }
          },
          "match": "\\S+",
          "name": "meta.comments_block_emphasized"
        }
      ]
    },
    "comments_block_normal": {
      "patterns": [
        {
          "include": "#comments_block_special"
        },
        {
          "captures": {
            "0": {
              "name": "comment.block.mcfunction"
            }
          },
          "match": "\\S+",
          "name": "meta.comments_block_normal"
        },
        {
          "include": "#whitespace"
        }
      ]
    },
    "comments_block_special": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "markup.heading.mcfunction"
            }
          },
          "match": "@\\S+",
          "name": "meta.comments_block_special"
        },
        {
          "include": "#resource-name"
        },
        {
          "captures": {
            "0": {
              "name": "variable.other.mcfunction"
            }
          },
          "match": "\\s*/\\s*[#%$][A-Za-z0-9_.#%$]+",
          "name": "meta.comments_block_special"
        }
      ]
    },
    "literals": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "constant.numeric.boolean.mcfunction"
            }
          },
          "match": "\\b(true|false|True|False)\\b",
          "name": "meta.literals"
        },
        {
          "captures": {
            "0": {
              "name": "variable.uuid.mcfunction"
            }
          },
          "match": "\\b[0-9a-fA-F]+(?:-[0-9a-fA-F]+){4}\\b",
          "name": "meta.names"
        },
        {
          "captures": {
            "0": {
              "name": "constant.numeric.float.mcfunction"
            }
          },
          "match": "[+-]?\\d*\\.?\\d+([eE]?[+-]?\\d+)?[df]?\\b",
          "name": "meta.literals"
        },
        {
          "captures": {
            "0": {
              "name": "constant.numeric.integer.mcfunction"
            }
          },
          "match": "[+-]?\\d+(b|B|L|l|s|S)?\\b",
          "name": "meta.literals"
        },
        {
          "captures": {
            "0": {
              "name": "variable.other.mcfunction"
            }
          },
          "match": "\\.\\.",
          "name": "meta.ellipse.literals"
        },
        {
          "applyEndPatternLast": 1,
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.mcfunction"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.mcfunction"
            }
          },
          "name": "string.quoted.double.mcfunction",
          "patterns": [
            {
              "include": "#literals_string-double"
            }
          ]
        },
        {
          "applyEndPatternLast": 1,
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.mcfunction"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.mcfunction"
            }
          },
          "name": "string.quoted.single.mcfunction",
          "patterns": [
            {
              "include": "#literals_string-single"
            }
          ]
        }
      ]
    },
    "subcommands": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "entity.name.class.mcfunction"
            }
          },
          "match": "\\s*^[a-z_]+",
          "name": "meta.literals"
        }
      ]
    },
    "literals_string-double": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "constant.character.escape.mcfunction"
            }
          },
          "match": "\\\\.",
          "name": "meta.literals_string-double"
        },
        {
          "captures": {
            "0": {
              "name": "constant.character.escape.mcfunction"
            }
          },
          "match": "\\\\",
          "name": "meta.literals_string-double"
        },
        {
          "include": "#macro-name"
        },
        {
          "captures": {
            "0": {
              "name": "string.quoted.double.mcfunction"
            }
          },
          "match": "[^\\\\\"]",
          "name": "meta.literals_string-double"
        }
      ]
    },
    "literals_string-single": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "constant.character.escape.mcfunction"
            }
          },
          "match": "\\\\.",
          "name": "meta.literals_string-single"
        },
        {
          "captures": {
            "0": {
              "name": "constant.character.escape.mcfunction"
            }
          },
          "match": "\\\\",
          "name": "meta.literals_string-double"
        },
        {
          "include": "#macro-name"
        },
        {
          "captures": {
            "0": {
              "name": "string.quoted.single.mcfunction"
            }
          },
          "match": "[^\\\\']",
          "name": "meta.literals_string-single"
        }
      ]
    },
    "say": {
      "patterns": [
        {
          "begin": "^(\\s*/\\s*)(say)",
          "beginCaptures": {
            "1": {
              "name": "whitespace.mcfunction"
            },
            "2": {
              "name": "keyword.control.flow.mcfunction"
            }
          },
          "end": "\\n",
          "name": "meta.say.mcfunction",
          "patterns": [
            {
              "captures": {
                "0": {
                  "name": "constant.character.escape.mcfunction"
                }
              },
              "match": "\\\\\\s*\\n",
              "meta": "meta.say.backslash.mcfunction"
            },
            {
              "include": "#literals_string-double"
            },
            {
              "include": "#literals_string-single"
            }
          ]
        },
        {
          "begin": "(run)(\\s+)(say)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.mcfunction"
            },
            "2": {
              "name": "whitespace.mcfunction"
            },
            "3": {
              "name": "keyword.control.flow.mcfunction"
            }
          },
          "end": "\\n",
          "name": "meta.say.mcfunction",
          "patterns": [
            {
              "captures": {
                "0": {
                  "name": "constant.character.escape.mcfunction"
                }
              },
              "match": "\\\\\\s*\\n",
              "meta": "meta.say.backslash.mcfunction"
            },
            {
              "include": "#literals_string-double"
            },
            {
              "include": "#literals_string-single"
            }
          ]
        }
      ]
    },
    "names": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "whitespace.mcfunction"
            },
            "2": {
              "name": "keyword.control.flow.mcfunction"
            }
          },
          "match": "^(\\s*/\\s*)([a-z_]+)(?=\\s)",
          "name": "meta.names"
        },
        {
          "captures": {
            "1": {
              "name": "whitespace.mcfunction"
            },
            "2": {
              "name": "markup.italic.mcfunction"
            },
            "3": {
              "name": "whitespace.mcfunction"
            },
            "4": {
              "name": "keyword.control.flow.mcfunction"
            }
          },
          "match": "^(\\s*/\\s*)(\\$)( ?)([a-z_]*)",
          "name": "meta.names"
        },
        {
          "captures": {
            "1": {
              "name": "entity.name.mcfunction"
            },
            "2": {
              "name": "whitespace.mcfunction"
            },
            "3": {
              "name": "keyword.control.flow.mcfunction"
            }
          },
          "match": "(run)(\\s+)([a-z_]+)",
          "name": "meta.names"
        },
        {
          "include": "#resource-name"
        },
        {
          "include": "#macro-name"
        },
        {
          "captures": {
            "0": {
              "name": "variable.other.mcfunction"
            }
          },
          "match": "([#%$]|((?<=\\s)\\.))[A-Za-z0-9_.#%$\\-]+",
          "name": "meta.names"
        }
      ]
    },
    "macro-name": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.template-expression.begin.mcfunction"
            },
            "2": {
              "name": "variable.other.mcfunction"
            },
            "3": {
              "name": "punctuation.definition.template-expression.end.mcfunction"
            }
          },
          "match": "(\\$\\()([A-Za-z0-9_]*)(\\))",
          "name": "meta.macro-name"
        }
      ]
    },
    "property": {
      "patterns": [
        {
          "applyEndPatternLast": 1,
          "begin": "^\\s*/\\s*.*\\{",
          "captures": {
            "0": {
              "name": "punctuation.mcfunction"
            }
          },
          "end": "^\\s*/\\s*.*\\}",
          "name": "meta.property.curly",
          "patterns": [
            {
              "include": "#resource-name"
            },
            {
              "include": "#literals"
            },
            {
              "include": "#property_key"
            },
            {
              "include": "#mcoperators"
            },
            {
              "include": "#property_value"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "applyEndPatternLast": 1,
          "begin": "^\\s*/\\s*.*\\[",
          "captures": {
            "0": {
              "name": "variable.other.mcfunction"
            }
          },
          "end": "^\\s*/\\s*.*\\]",
          "name": "meta.property.square",
          "patterns": [
            {
              "include": "#resource-name"
            },
            {
              "include": "#literals"
            },
            {
              "include": "#property_key"
            },
            {
              "include": "#mcoperators"
            },
            {
              "include": "#property_value"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "applyEndPatternLast": 1,
          "begin": "^\\s*/\\s*.*\\(",
          "captures": {
            "0": {
              "name": "punctuation.mcfunction"
            }
          },
          "end": "^\\s*/\\s*.*\\)",
          "name": "meta.property.paren",
          "patterns": [
            {
              "include": "#resource-name"
            },
            {
              "include": "#literals"
            },
            {
              "include": "#property_key"
            },
            {
              "include": "#mcoperators"
            },
            {
              "include": "#property_value"
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "property_key": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "variable.other.mcfunction"
            }
          },
          "match": "#?[a-z_][a-z_\\.\\-]*\\:[a-z0-9_\\.\\-/]+(?=\\s*\\=:)",
          "name": "meta.property_key"
        },
        {
          "captures": {
            "0": {
              "name": "variable.other.mcfunction"
            }
          },
          "match": "#?[a-z_][a-z0-9_\\.\\-/]+",
          "name": "meta.property_key"
        },
        {
          "captures": {
            "0": {
              "name": "variable.other.mcfunction"
            }
          },
          "match": "[A-Za-z_]+[A-Za-z_\\-\\+]*",
          "name": "meta.property_key"
        }
      ]
    },
    "property_value": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "string.unquoted.mcfunction"
            }
          },
          "match": "#?[a-z_][a-z_\\.\\-]*\\:[a-z0-9_\\.\\-/]+",
          "name": "meta.property_value"
        },
        {
          "captures": {
            "0": {
              "name": "string.unquoted.mcfunction"
            }
          },
          "match": "#?[a-z_][a-z0-9_\\.\\-/]+",
          "name": "meta.property_value"
        }
      ]
    },
    "resource-name": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "entity.name.function.mcfunction"
            }
          },
          "match": "#?[a-z_][a-z0-9_.-]*:[a-z0-9_./-]+",
          "name": "meta.resource-name"
        },
        {
          "captures": {
            "0": {
              "name": "entity.name.function.mcfunction"
            }
          },
          "match": "#?[a-z0-9_\\.\\-]+\\/[a-z0-9_\\.\\-\\/]+",
          "name": "meta.resource-name"
        }
      ]
    },
    "selectors": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "support.class.mcfunction"
            }
          },
          "match": "@[a-z]+",
          "name": "meta.selectors"
        }
      ]
    }
  },
  "scopeName": "source.planet",
  "fileTypes": ["planet"]
}